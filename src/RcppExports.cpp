// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// weight_cpp
NumericMatrix weight_cpp(NumericVector xx, double h);
RcppExport SEXP _MDCcure_weight_cpp(SEXP xxSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(weight_cpp(xx, h));
    return rcpp_result_gen;
END_RCPP
}
// beran_cpp
NumericVector beran_cpp(NumericMatrix data, NumericMatrix w);
RcppExport SEXP _MDCcure_beran_cpp(SEXP dataSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(beran_cpp(data, w));
    return rcpp_result_gen;
END_RCPP
}
// beranT_cpp
NumericMatrix beranT_cpp(NumericMatrix data, NumericMatrix w);
RcppExport SEXP _MDCcure_beranT_cpp(SEXP dataSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(beranT_cpp(data, w));
    return rcpp_result_gen;
END_RCPP
}
// beranC_cpp
Rcpp::NumericMatrix beranC_cpp(NumericMatrix data, NumericMatrix w);
RcppExport SEXP _MDCcure_beranC_cpp(SEXP dataSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(beranC_cpp(data, w));
    return rcpp_result_gen;
END_RCPP
}
// latency_estimator_multivariate_cpp
arma::vec latency_estimator_multivariate_cpp(const arma::vec& t, const arma::rowvec& x, const arma::vec& T, const arma::mat& X, const arma::vec& delta, Nullable<arma::mat> H_in);
RcppExport SEXP _MDCcure_latency_estimator_multivariate_cpp(SEXP tSEXP, SEXP xSEXP, SEXP TSEXP, SEXP XSEXP, SEXP deltaSEXP, SEXP H_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< Nullable<arma::mat> >::type H_in(H_inSEXP);
    rcpp_result_gen = Rcpp::wrap(latency_estimator_multivariate_cpp(t, x, T, X, delta, H_in));
    return rcpp_result_gen;
END_RCPP
}
// mdc_cpp
double mdc_cpp(SEXP X_, SEXP Y_, std::string center);
RcppExport SEXP _MDCcure_mdc_cpp(SEXP X_SEXP, SEXP Y_SEXP, SEXP centerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_(Y_SEXP);
    Rcpp::traits::input_parameter< std::string >::type center(centerSEXP);
    rcpp_result_gen = Rcpp::wrap(mdc_cpp(X_, Y_, center));
    return rcpp_result_gen;
END_RCPP
}
// mdd_cpp
double mdd_cpp(NumericMatrix X, NumericMatrix Y, std::string center);
RcppExport SEXP _MDCcure_mdd_cpp(SEXP XSEXP, SEXP YSEXP, SEXP centerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< std::string >::type center(centerSEXP);
    rcpp_result_gen = Rcpp::wrap(mdd_cpp(X, Y, center));
    return rcpp_result_gen;
END_RCPP
}
// permutation_test_cpp_parallel
List permutation_test_cpp_parallel(NumericMatrix X, NumericVector Y, int n_permutations, std::string center, bool parallel, int n_threads);
RcppExport SEXP _MDCcure_permutation_test_cpp_parallel(SEXP XSEXP, SEXP YSEXP, SEXP n_permutationsSEXP, SEXP centerSEXP, SEXP parallelSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type n_permutations(n_permutationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type center(centerSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(permutation_test_cpp_parallel(X, Y, n_permutations, center, parallel, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// pmdc_cpp
double pmdc_cpp(NumericMatrix X, NumericMatrix Y, NumericMatrix Z);
RcppExport SEXP _MDCcure_pmdc_cpp(SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(pmdc_cpp(X, Y, Z));
    return rcpp_result_gen;
END_RCPP
}
// pmdd_cpp
double pmdd_cpp(NumericMatrix X, NumericMatrix Y, NumericMatrix Z);
RcppExport SEXP _MDCcure_pmdd_cpp(SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(pmdd_cpp(X, Y, Z));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MDCcure_weight_cpp", (DL_FUNC) &_MDCcure_weight_cpp, 2},
    {"_MDCcure_beran_cpp", (DL_FUNC) &_MDCcure_beran_cpp, 2},
    {"_MDCcure_beranT_cpp", (DL_FUNC) &_MDCcure_beranT_cpp, 2},
    {"_MDCcure_beranC_cpp", (DL_FUNC) &_MDCcure_beranC_cpp, 2},
    {"_MDCcure_latency_estimator_multivariate_cpp", (DL_FUNC) &_MDCcure_latency_estimator_multivariate_cpp, 6},
    {"_MDCcure_mdc_cpp", (DL_FUNC) &_MDCcure_mdc_cpp, 3},
    {"_MDCcure_mdd_cpp", (DL_FUNC) &_MDCcure_mdd_cpp, 3},
    {"_MDCcure_permutation_test_cpp_parallel", (DL_FUNC) &_MDCcure_permutation_test_cpp_parallel, 6},
    {"_MDCcure_pmdc_cpp", (DL_FUNC) &_MDCcure_pmdc_cpp, 3},
    {"_MDCcure_pmdd_cpp", (DL_FUNC) &_MDCcure_pmdd_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_MDCcure(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
